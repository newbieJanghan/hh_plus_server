plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group = 'my'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.12"
}
def jacocoDir = layout.buildDirectory.dir("jacocoReport/")
def jacocoExclude = [
        'my/ecommerce/**/*Config*',
        'my/ecommerce/**/*Application*',
        'my/ecommerce/**/*Exception*',
        'my/ecommerce/**/*Request*',
        'my/ecommerce/**/*Response*',
        'my/ecommerce/**/*Dto*',
        'my/ecommerce/**/*Entity*',
        '**/test/**',
        '**/resources/**'
]

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.destination jacocoDir.get().file("index.html").asFile
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: jacocoExclude)
                })
        )
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                minimum = 140
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }

            excludes = jacocoExclude
        }
    }
}


tasks.register('testCoverage', Test) {
    group 'verification'
    description 'Run tests and generate coverage report'

    dependsOn('test',
            'jacocoTestReport',
            'jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}



